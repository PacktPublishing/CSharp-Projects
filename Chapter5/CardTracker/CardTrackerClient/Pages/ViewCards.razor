@page "/Cards"
@using CardTracker.Contracts.Responses
@using CardTrackerClient.Services
@inject ICardApiService CardApiService

<h3>Cards</h3>
<p>This page lists all cards available in the game for reference purposes.</p>

@if (_cards != null)
{
    if (_cards.Count > 0)
    {
        <div class="row">
            @foreach (var card in _cards)
            {
                <div class="col">
                    <div class="card h-100 m-2 p-3 bg-info text-white" style="aspect-ratio: 5/7; border: thin solid rgba(255, 255, 255, 0.1);">
                        <h5 class="card-title mt-3">@card.Name</h5>
                        @if (!string.IsNullOrEmpty(card.ImagePath))
                        {
                            <img src="@card.ImagePath" alt="@card.ImagePath" style="object-fit: cover; height: 100%; width: 100%;" />
                        }
                        else
                        {
                            <div class="d-flex align-items-center justify-content-center"
                                 style="height: auto; width: 100%; background-color: black;">
                                <span>No Image Available</span>
                            </div>
                        }
                        <p class="card-text my-2">@card.Description</p>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="alert alert-warning" role="alert">
            No cards found. Is the database set up?
        </div>
    }
}
else if (string.IsNullOrEmpty(_message))
{
    <div class="spinner-border" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}

@if (!string.IsNullOrEmpty(_message))
{
    <div class="alert alert-danger" role="alert">
        @_message
    </div>
}

@code {
    private List<CardResponse>? _cards = null;
    private string? _message;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _cards = await CardApiService.GetAllCardsAsync();
        }
        catch (Exception ex)
        {
            _message = $"Failed to load cards: {ex.Message}";
        }
    }

}