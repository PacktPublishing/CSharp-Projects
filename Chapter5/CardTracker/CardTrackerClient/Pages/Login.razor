@using System.ComponentModel.DataAnnotations
@using CardTracker.Contracts.Requests
@using CardTracker.Contracts.Responses
@using CardTrackerClient.Services
@inject ICardApiService CardApiService
@inject NavigationManager NavigationManager
@page "/login"

<h3>Login</h3>

<EditForm Model="this" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label for="username">Username:</label>
        <InputText id="username" @bind-Value="_username" class="form-control" />
    </div>
    <div>
        <label for="password">Password:</label>
        <InputText id="password" @bind-Value="_password" type="password" class="form-control" />
    </div>
    
    <button type="submit" class="btn btn-primary mt-2">Login</button>
</EditForm>

@if (!string.IsNullOrEmpty(_message))
{
    <p>@_message</p>
}

@code {
    [Required]
    private string? _username;
    [Required]
    private string? _password;
    
    private string? _message;

    private async Task HandleLogin()
    {
        try
        {
            if (string.IsNullOrEmpty(_username) || string.IsNullOrEmpty(_password))
            {
                _message = "Username and password cannot be empty.";
                return;
            }
            
            LoginRequest loginRequest = new()
            {
                Username = _username,
                Password = _password
            };
            LoginResponse response = await CardApiService.LoginAsync(loginRequest);
            _message = "Login successful: " + response.Token;
            
            // Redirect to Home page after successful login
            NavigationManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            _message = $"Login failed: {ex.Message}";
        }
    }
}